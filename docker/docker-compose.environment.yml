# docker-compose -f docker-compose.environment.yml pull

# docker-compose -f docker-compose.environment.yml up -d

# docker-compose -f docker-compose.explorviz.yml -f docker-compose.environment.yml down -v

version: "3.5"
services:

  ## Kafka ##

  zookeeper:
    image: zookeeper:3.6
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    volumes:
       - zookeeper-data:/data
       - zookeeper-data-log:/datalog
       - zookeeper-log:/logs
    networks:
      - explorviz

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_EXT_PORT}:9091"
    environment:
      KAFKA_LISTENERS: OUTSIDE://:${KAFKA_EXT_PORT},INSIDE://kafka:${KAFKA_INT_PORT}
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:${KAFKA_EXT_PORT},INSIDE://kafka:${KAFKA_INT_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: "LogAppendTime"
      KAFKA_MESSAGE_MAX_BYTES: 7000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: "cluster-dump-spans:1:1,explorviz-spans-structure:1:1,explorviz-spans-dynamic:1:1,token-events:1:1"
    depends_on:
      - zookeeper
    volumes:
      - kafka:/kafka
    networks:
      - explorviz

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.4.0
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:${KAFKA_INT_PORT}
      SCHEMA_REGISTRY_HOST_NAME: 127.0.0.1
    depends_on:
      - kafka
    volumes:
      - schema-registry:/etc/schema-registry/secrets
    networks:
      - explorviz

  ## Open Census ##

  oc-collector:
    image: omnition/opencensus-collector:0.1.11
    container_name: oc-collector
    command: ["--config=/etc/oc-collector-config.yaml"]
    restart: on-failure
    volumes:
      - ./generic/oc-collector-config.yaml:/etc/oc-collector-config.yaml
    ports:
      - "${OC_COLLECTOR_PORT}:55678"
    depends_on:
      - schema-registry
    networks:
      - explorviz

  ## Adapter-Service ##

  redis-adapter:
    container_name: redis-adapter-service
    image: redis:alpine3.13
    ports:
      - "${REDIS_ADAPTER_SERV_PORT}:6379"
    volumes:
      - redis-adapter:/data
    networks:
      - explorviz

  ## Cassandra for Landscape and Trace Service ##

  cassandra:
    container_name: cassandra-explorviz
    image: bitnami/cassandra:3.11.10
    ports:
      - "${CASSANDRA_PORT}:9042"
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=200M
    volumes:
      - cassandra:/bitnami
      - ./generic/cassandra:/docker-entrypoint-initdb.d
    networks:
      - explorviz

  ## User-Service ##

  mongo-user:
    image: mongo
    container_name: user-mongo
    ports:
      - ${MONGO_USER_SERV_PORT}:27017
    volumes:
       - user-mongo-data:/data/db
       - user-mongo-configdb:/data/configdb
    networks:
      - explorviz

# Volumes
# Delete all ExplorViz volumes:
# docker volume rm $(docker volume ls -f name=explorviz -q)

volumes:
  zookeeper-data:
    name: explorviz-zookeeper-data
  zookeeper-data-log:
    name: explorviz-zookeeper-data-log
  zookeeper-log:
    name: explorviz-zookeeper-log
  kafka:
    name: explorviz-kafka
  schema-registry:
    name: explorviz-schema-registry
  user-mongo-data:
    name: explorviz-mongo-user-data
  user-mongo-configdb:
    name: explorviz-mongo-user-config
  cassandra:
    name: explorviz-cassandra
  redis-adapter:
    name: explorviz-redis

networks:
  explorviz:
    name: explorviz
