# docker-compose down -v

# docker-compose pull && docker-compose up -d all

# docker-compose pull && docker-compose up -d dev-environment

version: "3.5"
services:

  ## Kafka ##

  zookeeper:
    image: zookeeper:3.6
    container_name: zookeeper    
    ports:
      - "2181:2181"
    volumes:
       - zookeeper-data:/data
       - zookeeper-data-log:/datalog
       - zookeeper-log:/logs
    networks:
      - explorviz

  kafka:
    container_name: kafka
    image: wurstmeister/kafka    
    ports:
      - "9091:9091"
    environment:
      KAFKA_LISTENERS: OUTSIDE://:9091,INSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:9091,INSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: "LogAppendTime"
      KAFKA_MESSAGE_MAX_BYTES: 2000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: "cluster-dump-spans:1:1,explorviz-spans-structure:1:1,explorviz-spans-dynamic:1:1,token-events:1:1"
    depends_on:
      - zookeeper
    volumes:
      - kafka:/kafka
    networks:
      - explorviz

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.4.0
    ports: 
      - "8081:8081"
      - "9021:9021"
    environment: 
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: 127.0.0.1
    depends_on:
      - kafka
    volumes:
      - schema-registry:/etc/schema-registry/secrets
    networks:
      - explorviz
  
  ## Open Census ##  

  oc-collector:
    image: omnition/opencensus-collector:0.1.11
    container_name: oc-collector
    command: ["--config=/etc/oc-collector-config.yaml"]
    volumes:
      - ../generic/oc-collector-config.yaml:/etc/oc-collector-config.yaml
    ports:
      - "55678:55678"
    depends_on:
      - schema-registry
    networks:
      - explorviz

  ## Adapter-Service ##

  redis-adapter:
    container_name: redis-adapter-service
    image: redis:alpine3.13
    ports:
      - "6379:6379"
    volumes:
      - redis-adapter:/data
    networks:
      - explorviz

  adapter-service:
    container_name: adapter-service
    image: explorviz/adapter-service-jvm:latest
    networks:
      - explorviz
    depends_on:
      - redis-adapter
      - oc-collector
    environment:
      - QUARKUS_REDIS_HOSTS=redis://redis-adapter:6379
      - MP_MESSAGING_INCOMING_TOKEN_EVENTS_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - EXPLORVIZ_SCHEMA_REGISTRY_URL=http://schema-registry:8081

  adapter-service-dev:
    container_name: adapter-service-dev
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - redis-adapter
      - oc-collector

  ## Cassandra for Landscape and Trace Service ##

  cassandra:
    container_name: cassandra-explorviz
    image: bitnami/cassandra:3.11.10
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=200M
    volumes:
      - cassandra:/bitnami
      - ../generic/cassandra:/docker-entrypoint-initdb.d
    networks:
      - explorviz

  ## Landscape-Service ##

  landscape-service:
    container_name: landscape-service
    image: explorviz/landscape-service-jvm:latest
    networks:
      - explorviz
    depends_on:
      - cassandra
      - kafka
    ports:
      - 8082:8080
    environment:
      - QUARKUS_CASSANDRA_CONTACT_POINTS=cassandra:9042
      - QUARKUS_CASSANDRA_AUTH_USERNAME=cassandra
      - QUARKUS_CASSANDRA_AUTH_PASSWORD=cassandra
      - MP_MESSAGING_INCOMING_TOKEN_EVENTS_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - EXPLORVIZ_SCHEMA_REGISTRY_URL=http://schema-registry:8081
  
  landscape-service-dev:
    container_name: landscape-service-dev
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - cassandra
      - kafka

  ## Trace-Service ##

  trace-service:
    container_name: trace-service
    image: explorviz/trace-service-jvm:latest
    ports:
      - 8083:8080
    networks:
      - explorviz
    depends_on:
      - cassandra
      - kafka
    environment:
      - QUARKUS_CASSANDRA_CONTACT_POINTS=cassandra:9042
      - QUARKUS_CASSANDRA_AUTH_USERNAME=cassandra
      - QUARKUS_CASSANDRA_AUTH_PASSWORD=cassandra
      - MP_MESSAGING_INCOMING_TOKEN_EVENTS_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - EXPLORVIZ_SCHEMA_REGISTRY_URL=http://schema-registry:8081

  trace-service-dev:
    container_name: trace-service-dev
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - cassandra
      - kafka

  ## User-Service ##

  mongo-user:
    image: mongo
    container_name: user-mongo
    ports:
      - 27017:27017
    volumes:
       - user-mongo-data:/data/db
       - user-mongo-configdb:/data/configdb
    networks:
      - explorviz

  user-service:
    container_name: user-service
    image: explorviz/user-service-jvm:latest
    ports:
      - 8084:8080
    networks:
      - explorviz
    depends_on:
      - mongo-user
      - kafka
    environment:
      - MP_MESSAGING_OUTGOING_TOKEN_EVENTS_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - QUARKUS_MONGODB_CONNECTION_STRING=mongodb://mongo-user:27017

  user-service-dev:
    container_name: user-service-dev
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - mongo-user
      - kafka

  ## Frontend ##

  # TODO

  ## Helper-Services ##

  dev-environment:
    container_name: starter-explorviz-dev-environment
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - adapter-service-dev
      - trace-service-dev
      - landscape-service-dev
      - user-service-dev

  all:
    container_name: starter-explorviz
    image: alpine:3
    tty: true
    networks:
      - explorviz
    depends_on:
      - adapter-service
      - trace-service
      - landscape-service
      - user-service

# Volumes
# Delete all ExplorViz volumes: 
# docker volume rm $(docker volume ls -f name=explorviz -q)

volumes:
  zookeeper-data:
    name: explorviz-zookeeper-data
  zookeeper-data-log:
    name: explorviz-zookeeper-data-log
  zookeeper-log:
    name: explorviz-zookeeper-log
  kafka:
    name: explorviz-kafka
  schema-registry:
    name: explorviz-schema-registry
  user-mongo-data:
    name: explorviz-mongo-user-data
  user-mongo-configdb:
    name: explorviz-mongo-user-config
  cassandra:
    name: explorviz-cassandra
  redis-adapter:
    name: explorviz-redis

networks:
  explorviz:
    name: explorviz